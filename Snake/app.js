// Generated by CoffeeScript 1.4.0
(function() {
  var Game, Snake, clear, game, println, run_loop;

  Snake = function() {
    var snake;
    return snake = {
      direction: 'east',
      positions: [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5]],
      head: function() {
        return this.positions[this.positions.length - 1];
      },
      length: function() {
        return this.positions.length;
      },
      turn: function(direction) {
        return this.direction = direction;
      }
    };
  };

  Game = function(snake) {
    var game;
    return game = {
      board: new Array(),
      setupBoard: function() {
        this.fillBoard();
        this.setSnake();
        return this.setMouse();
      },
      fillBoard: function() {
        var i, j, _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 9; i = ++_i) {
          this.board[i] = new Array();
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 0; _j <= 9; j = ++_j) {
              _results1.push(this.board[i][j] = null);
            }
            return _results1;
          }).call(this));
        }
        return _results;
      },
      setSnake: function() {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = snake.positions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(this.board[snake.positions[i][0]][snake.positions[i][1]] = '=');
        }
        return _results;
      },
      mousePosition: [5, 7],
      setMouse: function() {
        return this.board[this.mousePosition[0]][this.mousePosition[1]] = '*';
      },
      moveMouse: function() {
        var onMouse, x, y;
        while (true) {
          x = Math.floor(Math.random() * 10);
          y = Math.floor(Math.random() * 10);
          onMouse = function() {
            var i, mouse, _i, _ref;
            mouse = false;
            for (i = _i = 0, _ref = snake.positions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
              if (snake.positions[i][0] === x && snake.positions[i][1] === y) {
                mouse = true;
              }
            }
            return mouse;
          };
          if (!onMouse()) {
            break;
          }
        }
        this.board[x][y] = '*';
        return this.mousePosition = [x, y];
      },
      nextPosition: function() {
        switch (snake.direction) {
          case 'east':
            return [snake.head()[0], snake.head()[1] + 1];
          case 'west':
            return [snake.head()[0], snake.head()[1] - 1];
          case 'north':
            return [snake.head()[0] - 1, snake.head()[1]];
          case 'south':
            return [snake.head()[0] + 1, snake.head()[1]];
        }
      },
      addToHead: function() {
        var next;
        next = this.nextPosition();
        this.board[next[0]][next[1]] = '#';
        return snake.positions.push(next);
      },
      takeFromTail: function() {
        var tail;
        tail = snake.positions.shift();
        return this.board[tail[0]][tail[1]] = null;
      },
      checkCollisions: function() {
        var hitSelf, next, offBoard;
        next = this.nextPosition();
        hitSelf = function() {
          var hit, i, _i, _ref;
          hit = false;
          for (i = _i = 0, _ref = snake.positions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (snake.positions[i][0] === next[0] && snake.positions[i][1] === next[1]) {
              hit = true;
            }
          }
          return hit;
        };
        offBoard = next[0] > 9 || next[0] < 0 || next[1] > 9 || next[1] < 0;
        return offBoard || hitSelf();
      },
      checkMice: function() {
        var next;
        next = this.nextPosition();
        return next[0] === this.mousePosition[0] && next[1] === this.mousePosition[1];
      },
      turn: function(direction) {
        return snake.turn(direction);
      },
      printBoard: function() {
        var i, j, row, _i, _j, _ref, _ref1, _ref2, _results;
        _results = [];
        for (i = _i = 0, _ref = this.board.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          row = '';
          for (j = _j = 0, _ref1 = this.board[i].length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
                        if ((_ref2 = this.board[i][j] === null) != null) {
              _ref2;

            } else {
              row += {
                'O': row += this.board[i][j]
              };
            };
          }
          _results.push(println(row));
        }
        return _results;
      },
      snake: function() {
        return snake;
      },
      step: function() {
        clear();
        if (this.checkCollisions()) {
          println("You Lose!");
          return;
        }
        if (this.checkMice()) {
          this.addToHead();
          this.moveMouse();
        } else {
          this.addToHead();
          this.takeFromTail();
        }
        return this.printBoard();
      }
    };
  };

  game = Game(Snake());

  game.setupBoard();

  run_loop = function() {
    return window.setInterval((function() {
      return game.step();
    }), 250);
  };

  window.setTimeout(run_loop, 250);

  println = function(string) {
    $('.output').append(string);
    return $('.output').append("\n");
  };

  clear = function() {
    return $('.output').html("");
  };

  $('html').keydown(function(event) {
    switch (event.keyCode) {
      case 38:
        return game.turn('north') && console.log('up');
      case 40:
        return game.turn('south');
      case 37:
        return game.turn('west');
      case 39:
        return game.turn('east');
    }
  });

}).call(this);
